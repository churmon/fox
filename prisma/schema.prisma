// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

enum userRole{
  driver
  security
  mechanic
  manager
  boss
  admin
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  surname       String?
  phone         String?
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          userRole @default(driver)
  access        Boolean  @default(false) 
  accounts      Account[]
  sessions      Session[]
  vehicleInspection VehicleInspection[]
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt
 
  @@map("users")
}

model VehicleInspection {
  id            String    @id @default(cuid())
  driverName    String
  driverSurname String
  regNo         String
  comment       String?
  fireExt       Boolean? @default(false)
  jack          Boolean? @default(false)
  wheelBrace    Boolean? @default(false)
  triangle      Boolean? @default(false)
  firstAid      Boolean? @default(false)
  spareWheel    Boolean? @default(false)
  headLights    Boolean? @default(false)
  indicatorL    Boolean? @default(false)
  indicatorR    Boolean? @default(false)
  brakeLightL   Boolean? @default(false)
  brakeLightR   Boolean? @default(false)
  hooter        Boolean? @default(false)
  doorLock      Boolean? @default(false)
  wayRadio      Boolean? @default(false)
  water         Boolean? @default(false)
  oil           Boolean? @default(false)
  brakeFluid    Boolean? @default(false)
  steeringOil   Boolean? @default(false)
  userId        String
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicleInspectionImages VehicleInspectionImages[]
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt
}

model VehicleInspectionImages{
  id            String    @id @default(cuid())
  url           String?
  vehicleInspectionId String
  vehicleInspection VehicleInspection @relation(fields: [vehicleInspectionId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt
}


 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}
